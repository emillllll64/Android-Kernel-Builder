# ====================================================================
#  Build kernels  ── Android-Kernel-Builder (multi-repo, KernelSU)
# ====================================================================

name: "Build kernels"

# ---- 1) Minimal scopes so the runner can 𝘥𝘰𝘸𝘯𝘭𝘰𝘢𝘥 Marketplace actions ----
permissions:
  contents: read          # checkout
  actions:  read          # <<-- this line fixes “Missing download info”
  # id-token: write       # (add only if you later need OIDC / cosign)

env:
  CONFIGURATION: repos.json        # file that drives the matrix
  OUT_DIR: out                     # build/output folder

on:
  workflow_dispatch:               # manual “Run workflow” button

# ─────────────────────────────────────────────────────────────────────
#  JOB 1  ·  read repos.json → emit a matrix
# ─────────────────────────────────────────────────────────────────────
jobs:
  Set-repos:
    name: "🐂 Parse repos.json"
    runs-on: ubuntu-latest

    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}

    steps:
      - name: "😄 Checkout"
        uses: actions/checkout@v4        # bump to v4

      - name: "😆 Generate matrix"
        id: generate-matrix
        shell: bash
        run: |
          echo "repos<<EOF" >> "$GITHUB_OUTPUT"
          cat "${{ env.CONFIGURATION }}" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

# ─────────────────────────────────────────────────────────────────────
#  JOB 2  ·  build each kernel in parallel
# ─────────────────────────────────────────────────────────────────────
  Build-Kernel:
    name: "🐎 Build kernel"
    runs-on: ubuntu-latest
    needs: Set-repos

    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}

    # ----------                       ----------
    # derive some handy env variables from the matrix element
    env:
      kernelDir:  ${{ matrix.repos.kernelSource.name }}_${{ matrix.repos.kernelSource.device }}
      kernelName: ${{ matrix.repos.kernelSource.name }}
      kernelRepo: ${{ matrix.repos.kernelSource.repo }}
      kernelBranch: ${{ matrix.repos.kernelSource.branch }}
      kernelDevice: ${{ matrix.repos.kernelSource.device }}
      DEFCONFIG_NAME: ${{ matrix.repos.kernelSource.device }}_defconfig
      withKernelSU: ${{ matrix.repos.withKernelSU }}

    steps:
      # ------------------------------------------------------------
      - name: "✨ Create working dir"
        run: mkdir -p "$kernelDir"

      # ------------------------------------------------------------
      - name: Install prerequisites
        run: |
           sudo apt-get update -y
           sudo apt-get install -y \
           build-essential bc curl git zip jq \
           flex bison libssl-dev libarchive-tools \
           zstd lftp wget

      # ------------------------------------------------------------
      - name: "🌟 Clone kernel source (${{ env.kernelRepo }})"
        working-directory: "./${{ env.kernelDir }}"
        run: |
          git clone --recursive --branch "$kernelBranch" --depth=1 \
            "$kernelRepo" "$kernelName"

      # ------------------------------------------------------------
      - name: "💫 Clone toolchains & export PATH"
        working-directory: "./${{ env.kernelDir }}"
        env:
          toolchains: "${{ toJSON(matrix.repos.toolchains) }}"
        shell: bash
        run: |
          num="$(echo "$toolchains" | jq 'length')"
          for ((i=0;i<num;i++)); do
            name=$(echo "$toolchains"  | jq -r ".[$i].name")
            repo=$(echo "$toolchains"  | jq -r ".[$i].repo")
            branch=$(echo "$toolchains"| jq -r ".[$i].branch")
            git clone --recursive --branch "$branch" --depth=1 "$repo" "$name"
            echo "$(pwd)/$name" >> "$GITHUB_PATH"
            echo "$(pwd)/$name/bin" >> "$GITHUB_PATH"
          done

      # ------------------------------------------------------------
      - name: "😎 Generate compiler args"
        id: args
        working-directory: "./${{ env.kernelDir }}"
        env:
          params: "${{ toJSON(matrix.repos.params) }}"
        shell: bash
        run: |
          ARCH=$(echo "$params" | jq -r .ARCH)
          CROSS_COMPILE=$(echo "$params" | jq -r .CROSS_COMPILE)
          CROSS_COMPILE_COMPAT=$(echo "$params" | jq -r .CROSS_COMPILE_COMPAT)
          CLANG_TRIPLE=$(echo "$params" | jq -r .CLANG_TRIPLE)
          AR=$(echo "$params" | jq -r .AR)
          CC=$(echo "$params" | jq -r .CC)

          echo "ARCH=$ARCH" >> "$GITHUB_ENV"

          args="-j$(nproc)"
          [ -n "$OUT_DIR" ] && { mkdir -p "$(pwd)/$OUT_DIR"; args+=" O=$(pwd)/$OUT_DIR"; }
          [ -n "$ARCH" ] && args+=" ARCH=$ARCH"
          [ -n "$CROSS_COMPILE" ] && args+=" CROSS_COMPILE=$CROSS_COMPILE"
          [ -n "$CLANG_TRIPLE" ] && args+=" CLANG_TRIPLE=$CLANG_TRIPLE"
          [ -n "$CROSS_COMPILE_COMPAT" ] && args+=" CROSS_COMPILE_ARM32=$CROSS_COMPILE_COMPAT"
          [ -n "$AR" ] && args+=" AR=$AR"
          [ -n "$CC" ] && args+=" CC=$CC"

          echo "args=$args" >> "$GITHUB_OUTPUT"

      # ------------------------------------------------------------
      - name: "😋 Update KernelSU (optional)"
        if: env.withKernelSU == 'true'
        working-directory: "./${{ env.kernelDir }}/${{ env.kernelName }}"
        shell: bash
        run: |
          rm -rf KernelSU drivers/kernelsu || true
          curl -LSs https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh | bash -s main
          {
            echo "CONFIG_KPROBES=y"
            echo "CONFIG_HAVE_KPROBES=y"
            echo "CONFIG_KPROBE_EVENTS=y"
          } >> "arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}"

      # ------------------------------------------------------------
      - name: "👍 make defconfig"
        working-directory: "./${{ env.kernelDir }}/${{ env.kernelName }}"
        env:
          MAKE_ARGS: ${{ steps.args.outputs.args }}
        run: |
          make $MAKE_ARGS ${{ env.DEFCONFIG_NAME }}

      # ------------------------------------------------------------
      - name: "🎶 Build kernel"
        working-directory: "./${{ env.kernelDir }}/${{ env.kernelName }}"
        env:
          MAKE_ARGS: ${{ steps.args.outputs.args }}
        run: |
          make $MAKE_ARGS

      # ------------------------------------------------------------
      #   UPLOAD ARTIFACTS  (using latest v4 tags)
      # ------------------------------------------------------------
      - name: "💛 Image"
        uses: actions/upload-artifact@v4
        with:
          name: Image(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: "./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image"
          if-no-files-found: ignore
          retention-days: 7

      - name: "💙 Image.gz"
        uses: actions/upload-artifact@v4
        with:
          name: Image.gz(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: "./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz"
          if-no-files-found: ignore
          retention-days: 7

      - name: "💜 dtb"
        uses: actions/upload-artifact@v4
        with:
          name: dtb(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: "./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtb"
          if-no-files-found: ignore
          retention-days: 7

      - name: "❤️ dtbo.img"
        uses: actions/upload-artifact@v4
        with:
          name: dtbo.img(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: "./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtbo.img"
          if-no-files-found: ignore
          retention-days: 7
